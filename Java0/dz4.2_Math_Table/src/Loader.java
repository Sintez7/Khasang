/* Напишите по памяти или пересмотрите лекцию по выводу таблицы умножения в консоль с помощью вложенных циклов.
   Сделайте так, чтобы вывод напоминал визуально то, как подобная таблица умножения выглядит в школьной тетради.
   То есть у вас должно получиться четыре колонки и два ряда

   Ага, сделали? Дополнительное задание.
   Основная цель практических работ – развить архитектурную гибкость мышления. Мы привыкаем видеть не один путь решения, а сразу несколько.
   Поэтому вам нужно это задание сделать тремя разными способами.

   //----------------------------------

   На сайте в качестве примера приведена таблица где до 5 считается с умножением на 10, а после - без него.
   Не знаю, ошибка ли это, ведь ниже приведён скрин с таблицей а там считается до 10.
   Сделаю как в образце, потому что могу.
   Ах да, раз уж вопрос в ООП + циклы, то пожалуй я могу использовать абстракции.
   А раз так - метод 2 будет попыткой в архитектурный паттерн "Стратегия".
   Метод 3 будет попыткой в паттерн "Фабрика".
 */

public class Loader {
    public static void main(String[] args) {
        System.out.println("Метод 1:\n");   // прямой счёт (работа с примитивами)
        method1();
        System.out.println("Метод 2:\n");   // получить массив и отобразить его (работа с ссылочными типами данных)
        method2();
        System.out.println("Метод 3:\n");   // делегирование другому методу (например через интерфейс)
        method3();
    }

    private static void method1() {
        int offset = 0;
        int multTo = 10;
        for(int bigRow = 0; bigRow < 2; bigRow++) {
            for(int multiplier = 1; multiplier <= multTo; multiplier++) {
                for(int firstNum = 2; firstNum <= 5; firstNum++) {
                    System.out.printf("%d * %d = %d\t\t", firstNum + offset, multiplier, (firstNum + offset) * multiplier);
                }
                System.out.println();
            }
            offset += 4;
            multTo = 9;
            System.out.println();
        }
    }

    private static void method2() {

    }

    private static void method3() {

    }
}
